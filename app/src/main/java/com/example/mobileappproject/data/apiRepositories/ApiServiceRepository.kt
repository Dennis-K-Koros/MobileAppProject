package com.example.mobileappproject.data.apiRepositories

import com.example.mobileappproject.data.api.ServiceApi
import com.example.mobileappproject.data.dao.ServiceDao
import com.example.mobileappproject.data.entities.Service
import com.example.mobileappproject.data.entities.ServiceModel
import com.example.mobileappproject.data.repositories.ServiceRepository
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.first
import java.util.Date

class ApiServiceRepository(
    private val serviceDao: ServiceDao,
    private val api: ServiceApi
) : ServiceRepository {

    override fun getAllServiceStream(): Flow<List<Service>> = serviceDao.getAllServices()

    override fun getServiceStream(id: String): Flow<Service?> = serviceDao.getService(id)

    override suspend fun insertService(service: Service) = serviceDao.insert(service)

    override suspend fun deleteService(service: Service) = serviceDao.delete(service)

    override suspend fun updateService(service: Service) = serviceDao.update(service)

    override suspend fun fetchServiceFromApi(): List<Service> {
        return try {
            val response = api.getService()
            if (response.isSuccessful) {
                val serviceModels = response.body()?.services
                if (serviceModels != null) {
                    val serviceEntities = serviceModels.map { mapToServiceEntity(it) }
                    serviceDao.insertAll(serviceEntities) // Save API data to local DB
                    serviceEntities // Return the newly saved services
                } else {
                    println("No services found in API response.")
                    emptyList()
                }
            } else {
                println("API error: ${response.message()}")
                serviceDao.getAllServices().first() // Fallback to cached data
            }
        } catch (e: Exception) {
            println("Exception in fetchServiceFromApi: ${e.message}")
            serviceDao.getAllServices().first() // Fallback to cached data
        }
    }

    // Mapper to convert ServiceModel (from API) to Service (Room entity)
    private fun mapToServiceEntity(serviceModel: ServiceModel): Service {
        return Service(
            id = 0, // Auto-generated by Room
            subcategory = serviceModel.subcategory,
            serviceName = serviceModel.serviceName,
            description = serviceModel.description,
            price = serviceModel.price,
            image = null, // Map this if the API provides an image field
            createdAt = serviceModel.createdAt.toDate(), // Parse date from string
            updatedAt = serviceModel.updatedAt.toDate() // Parse date from string
        )
    }
}

// Extension function to parse date from string
private fun String.toDate(): Date {
    // Implement proper date parsing here, e.g., using SimpleDateFormat or DateTimeFormatter
    return Date()
}
